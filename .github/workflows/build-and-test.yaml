name: Build and test
on:
  pull_request: {}
  push:
    branches:
      - main
  # Allow this workflow to be called from other workflows.
  workflow_call: {}
jobs:
  test:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest] # TODO: macos-latest, windows-latest
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      # Upgrade tools before rust-cache.
      # Use nightly instead of 'stable' to get improved rustfmt features.
      - run: rustup show
      - uses: Swatinem/rust-cache@v2

      - name: Build and test
        run: ./build-and-test.sh ci
      - name: Check for modified workspace
        run: git add . && git diff --exit-code HEAD --

  build:
    strategy:
      fail-fast: true
      matrix:
        platform:
          - rust_target: x86_64-unknown-linux-musl
            suffix: .linux_amd64
    name: Build for ${{ matrix.platform.rust_target }}
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      # Install the toolchain before rust-cache.
      - run: rustup target add ${{ matrix.platform.rust_target }}
      - uses: Swatinem/rust-cache@v2

      - name: Build ${{ matrix.platform.rust_target }}
        run: cargo build --release --target ${{ matrix.platform.rust_target }}
      - name: Upload ${{ matrix.platform.rust_target }}
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          name: git-toprepo${{ matrix.platform.suffix }}
          path: target/${{ matrix.platform.rust_target }}/release/git-toprepo
          if-no-files-found: error

      - name: Check for modified workspace
        run: git add . && git diff --exit-code HEAD --

  nix-build:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      # Allow purging caches.
      actions: write
    steps:
      - uses: actions/checkout@v4
      # nixbuild/nix-quick-install-action is required by nix-community/cache-nix-action
      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock', 'Cargo.*', 'rust-toolchain.toml', '.github/workflows/*') }}
          # If there's no cache hit, restore a cache by this prefix.
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # Collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache.
          gc-max-store-size-linux: 5G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          # Created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never
      - name: Build
        run: nix build
